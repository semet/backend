generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  PARENT
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.LongText
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

model Admin {
  id                String         @id @default(uuid())
  email             String         @unique
  phone             String         @unique
  fullName          String
  role              Role           @default(ADMIN)
  password          String
  lastLogin         DateTime?
  profileUpdatedAt  DateTime?
  passwordUpdatedAt DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  refreshToken      RefreshToken[]
}

model Department {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  batches   Batch[]
}

model Batch {
  id           String      @id @default(uuid())
  name         String
  alias        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  students     Student[]
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  groups       Group[]
}

model Group {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Batch     Batch?    @relation(fields: [batchId], references: [id])
  batchId   String?
  students  Student[]
}

model Student {
  id                String         @id @default(uuid())
  email             String         @unique
  phone             String         @unique
  fullName          String
  role              Role           @default(STUDENT)
  password          String
  lastLogin         DateTime?
  profileUpdatedAt  DateTime?
  passwordUpdatedAt DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Department        Department?    @relation(fields: [departmentId], references: [id])
  departmentId      String?
  Batch             Batch?         @relation(fields: [batchId], references: [id])
  batchId           String?
  Group             Group?         @relation(fields: [groupId], references: [id])
  groupId           String?
  refreshToken      RefreshToken[]
}
